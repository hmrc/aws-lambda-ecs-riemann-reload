[tool.poetry]
name = "aws-lambda-ecs-riemann-reload"
version = "0.0.5"
description = "An AWS Lambda that will re-deploy the Riemann consumer or producer services running in ECS, when triggered by an SNS notification"
authors = ["Vítor Brandão <109226+vitorbrandao@users.noreply.github.com>"]
maintainers = ["Team Telemetry"]
license = "Apache 2.0"

[[tool.poetry.source]]
name = "artifactory"
url = "https://artefacts.tax.service.gov.uk/artifactory/api/pypi/pips/simple/"

[tool.poetry.dependencies]
python = "^3.8"
boto3 = "^1.17.85"

[tool.poetry.dev-dependencies]
aws-lambda-context = "^1.1.0"
aws-lambda-powertools = "^1.16.1"
aws-sam-cli = "^1.6.2"
bandit = "^1.7.0"
black = "^21.5b2"
moto = "^2.0.8"
pytest = "^6.2.4"
pytest-cov = "^2.12.1"
safety = "^1.10.3"
taskipy = "^1.4.0"
version-incrementor = "^0.9.0"
colorama = "^0.4.4"
pre-commit = "^2.13.0"

[tool.taskipy.tasks]
clean = "rm -fr ./build"
unittest = "PYTHONPATH='src' pytest tests/unit --cov=src"
start_lambda = "./bin/start-lambda.sh"
stop_lambda = "./bin/stop-lambda.sh"
pre_functest = "task assemble && task start_lambda"
post_functest = "task stop_lambda"
test = "task unittest"
black_check = "black --check --diff ./src ./tests"
black_reformat = "black ./src ./tests"
safety = "safety check"
bandit = "bandit -r ./src"
prepare_release = "./bin/lambda_tools.sh prepare_release"
assemble = "./bin/lambda_tools.sh assemble"
cut_release = "cut-release"
publish_s3 = "./bin/lambda_tools.sh publish_s3"
publish = "./bin/lambda_tools.sh publish"
rename_s3_file = "./bin/lambda_tools.sh rename_s3_file"
publish_checksum_file = "./bin/lambda_tools.sh publish_checksum_file"
verify = "task test && task black_check && task safety && task bandit"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
